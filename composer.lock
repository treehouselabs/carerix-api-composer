{
    "_readme": [
        "This file locks the dependencies of your project to a known state",
        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
        "This file is @generated automatically"
    ],
    "hash": "de1d55b17a5558aa4e8a1de3260f82ef",
    "content-hash": "45e69f05e4391a82664592c40dc6e7ee",
    "packages": [
        {
            "name": "pear-pear.carerix.com/Carerix_Api_Rest",
            "version": "1.2.14",
            "dist": {
                "type": "file",
                "url": "http://pear.carerix.com/get/Carerix_Api_Rest-1.2.14.tgz",
                "reference": null,
                "shasum": null
            },
            "require": {
                "pear-pear.php.net/xml_serializer": ">=0.20.2.0",
                "php": ">=5.2.13.0"
            },
            "replace": {
                "pear-carerix/carerix_api_rest": "== 1.2.14.0"
            },
            "type": "pear-library",
            "autoload": {
                "classmap": [
                    ""
                ]
            },
            "include-path": [
                "/"
            ],
            "license": [
                "http://www.opensource.org/licenses/lgpl-license.php  LGPL"
            ],
            "description": "Provides an easy and intuitive interaction with Carerix REST API using object-oriented programming and ActiveRecord approach. For more details please refer to <a href=\"http://development.wiki.carerix.com/cxwiki/doku.php?id=cxrest\">Carerix REST API</a> and <a href=\"http://development.wiki.carerix.com/cxwiki/doku.php?id=cxrest_api_client\">Carerix REST API Client</a> documentation."
        },
        {
            "name": "pear-pear.php.net/Archive_Tar",
            "version": "1.4.2",
            "dist": {
                "type": "file",
                "url": "http://pear.php.net/get/Archive_Tar-1.4.2.tgz",
                "reference": null,
                "shasum": null
            },
            "require": {
                "php": ">=5.2.0.0"
            },
            "replace": {
                "pear-pear/archive_tar": "== 1.4.2.0"
            },
            "type": "pear-library",
            "autoload": {
                "classmap": [
                    ""
                ]
            },
            "include-path": [
                "/"
            ],
            "license": [
                "New BSD License"
            ],
            "description": "This class provides handling of tar files in PHP.\nIt supports creating, listing, extracting and adding to tar files.\nGzip support is available if PHP has the zlib extension built-in or\nloaded. Bz2 compression is also supported with the bz2 extension loaded."
        },
        {
            "name": "pear-pear.php.net/Console_Getopt",
            "version": "1.4.1",
            "dist": {
                "type": "file",
                "url": "http://pear.php.net/get/Console_Getopt-1.4.1.tgz",
                "reference": null,
                "shasum": null
            },
            "require": {
                "php": ">=5.4.0.0"
            },
            "replace": {
                "pear-pear/console_getopt": "== 1.4.1.0"
            },
            "type": "pear-library",
            "autoload": {
                "classmap": [
                    ""
                ]
            },
            "include-path": [
                "/"
            ],
            "license": [
                "BSD-2-Clause"
            ],
            "description": "This is a PHP implementation of \"getopt\" supporting both\nshort and long options."
        },
        {
            "name": "pear-pear.php.net/PEAR",
            "version": "1.10.1",
            "dist": {
                "type": "file",
                "url": "http://pear.php.net/get/PEAR-1.10.1.tgz",
                "reference": null,
                "shasum": null
            },
            "require": {
                "ext-pcre": "*",
                "ext-xml": "*",
                "pear-pear.php.net/archive_tar": ">=1.4.0.0",
                "pear-pear.php.net/console_getopt": ">=1.4.1.0",
                "pear-pear.php.net/structures_graph": ">=1.1.0.0",
                "pear-pear.php.net/xml_util": ">=1.3.0.0",
                "php": ">=5.4.0.0"
            },
            "conflict": {
                "pear-pear.php.net/pear_frontend_gtk": "<0.4.0.0",
                "pear-pear.php.net/pear_frontend_web": "<=0.4.0.0"
            },
            "replace": {
                "pear-pear/pear": "== 1.10.1.0"
            },
            "type": "pear-library",
            "autoload": {
                "classmap": [
                    ""
                ]
            },
            "include-path": [
                "/"
            ],
            "license": [
                "New BSD License"
            ],
            "description": "The PEAR package contains:\n * the PEAR installer, for creating, distributing\n   and installing packages\n * the PEAR_Exception PHP5 error handling mechanism\n * the PEAR_ErrorStack advanced error handling mechanism\n * the PEAR_Error error handling mechanism\n * the OS_Guess class for retrieving info about the OS\n   where PHP is running on\n * the System class for quick handling of common operations\n   with files and directories\n * the PEAR base class\n  Features in a nutshell:\n  * full support for channels\n  * pre-download dependency validation\n  * new package.xml 2.0 format allows tremendous flexibility while maintaining BC\n  * support for optional dependency groups and limited support for sub-packaging\n  * robust dependency support\n  * full dependency validation on uninstall\n  * remote install for hosts with only ftp access - no more problems with\n    restricted host installation\n  * full support for mirroring\n  * support for bundling several packages into a single tarball\n  * support for static dependencies on a url-based package\n  * support for custom file roles and installation tasks"
        },
        {
            "name": "pear-pear.php.net/Structures_Graph",
            "version": "1.1.1",
            "dist": {
                "type": "file",
                "url": "http://pear.php.net/get/Structures_Graph-1.1.1.tgz",
                "reference": null,
                "shasum": null
            },
            "require": {
                "php": ">=5.3.0.0"
            },
            "replace": {
                "pear-pear/structures_graph": "== 1.1.1.0"
            },
            "type": "pear-library",
            "autoload": {
                "classmap": [
                    ""
                ]
            },
            "include-path": [
                "/"
            ],
            "license": [
                "LGPL-3.0+"
            ],
            "description": "Structures_Graph is a package for creating and manipulating graph datastructures. It allows building of directed\nand undirected graphs, with data and metadata stored in nodes. The library provides functions for graph traversing\nas well as for characteristic extraction from the graph topology."
        },
        {
            "name": "pear-pear.php.net/XML_Parser",
            "version": "1.3.6",
            "dist": {
                "type": "file",
                "url": "http://pear.php.net/get/XML_Parser-1.3.6.tgz",
                "reference": null,
                "shasum": null
            },
            "require": {
                "pear-pear.php.net/pear": "*",
                "php": ">=4.2.0.0"
            },
            "replace": {
                "pear-pear/xml_parser": "== 1.3.6.0"
            },
            "type": "pear-library",
            "autoload": {
                "classmap": [
                    ""
                ]
            },
            "include-path": [
                "/"
            ],
            "license": [
                "BSD License"
            ],
            "description": "This is an XML parser based on PHPs built-in xml extension.\nIt supports two basic modes of operation: \"func\" and \"event\".  In \"func\" mode, it will look for a function named after each element (xmltag_ELEMENT for start tags and xmltag_ELEMENT_ for end tags), and in \"event\" mode it uses a set of generic callbacks.\n\nSince version 1.2.0 there's a new XML_Parser_Simple class that makes parsing of most XML documents easier, by automatically providing a stack for the elements.\nFurthermore its now possible to split the parser from the handler object, so you do not have to extend XML_Parser anymore in order to parse a document with it."
        },
        {
            "name": "pear-pear.php.net/XML_Serializer",
            "version": "0.20.2",
            "dist": {
                "type": "file",
                "url": "http://pear.php.net/get/XML_Serializer-0.20.2.tgz",
                "reference": null,
                "shasum": null
            },
            "require": {
                "ext-xml": "*",
                "pear-pear.php.net/pear": "*",
                "pear-pear.php.net/xml_parser": ">=1.2.6.0",
                "pear-pear.php.net/xml_util": ">=1.1.1.0",
                "php": ">=4.2.0.0"
            },
            "replace": {
                "pear-pear/xml_serializer": "== 0.20.2.0"
            },
            "type": "pear-library",
            "autoload": {
                "classmap": [
                    ""
                ]
            },
            "include-path": [
                "/"
            ],
            "license": [
                "BSD License"
            ],
            "description": "XML_Serializer serializes complex data structures like arrays or object as XML documents.\nThis class helps you generating any XML document you require without the need for DOM.\nFurthermore this package can be used as a replacement to serialize() and unserialize() as it comes with a matching XML_Unserializer that is able to create PHP data structures (like arrays and objects) from XML documents, if type hints are available.\nIf you use the XML_Unserializer on standard XML files, it will try to guess how it has to be unserialized. In most cases it does exactly what you expect it to do.\nTry reading a RSS file with XML_Unserializer and you have the whole RSS file in a structured array or even a collection of objects, similar to XML_RSS.\n\nSince version 0.8.0 the package is able to treat XML documents similar to the simplexml extension of PHP 5."
        },
        {
            "name": "pear-pear.php.net/XML_Util",
            "version": "1.3.0",
            "dist": {
                "type": "file",
                "url": "http://pear.php.net/get/XML_Util-1.3.0.tgz",
                "reference": null,
                "shasum": null
            },
            "require": {
                "ext-pcre": "*",
                "php": ">=5.3.0.0"
            },
            "replace": {
                "pear-pear/xml_util": "== 1.3.0.0"
            },
            "type": "pear-library",
            "autoload": {
                "classmap": [
                    ""
                ]
            },
            "include-path": [
                "/"
            ],
            "license": [
                "BSD License"
            ],
            "description": "Selection of methods that are often needed when working with XML documents.  Functionality includes creating of attribute lists from arrays, creation of tags, validation of XML names and more."
        }
    ],
    "packages-dev": [],
    "aliases": [],
    "minimum-stability": "stable",
    "stability-flags": [],
    "prefer-stable": false,
    "prefer-lowest": false,
    "platform": [],
    "platform-dev": []
}
